plugins {
    id 'application'
    id 'java'
    id 'eclipse'
    id 'org.springframework.boot' version '2.3.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
}

repositories {
    jcenter()
}

configurations {
    compile.exclude module: 'spring-boot-starter-logging'
}

dependencies {
    compile fileTree(dir: "libs", includes: ['**/*.jar'])
    implementation 'org.springframework.boot:spring-boot-starter-web'
}

task sources {
    group 'ghidra'
    doLast {
        sourceSets.each {
            println(it)
            it.allSource.each {
                println(it)
            }
        }
    }
}

task deps(dependsOn: configurations.compileClasspath) {
	group 'ghidra'
    doLast {
    	fileTree(dir: "libs", include: '**/*.jar').each {File file ->
    		println file
		}
        println "classpath = ${configurations.compileClasspath.collect { File file -> file.name }}"
    }
}

task downloadGhidra {
    group 'ghidra'
    doLast {
        def f = new File(projectDir.getAbsolutePath() + '/libs/' + ghidraArchive)
        if (!f.isFile()) {
            print "Downloading ghidra distribution to " + f.getAbsolutePath() + ".. "
            new URL('https://ghidra-sre.org/' + ghidraArchive).withInputStream{ i -> f.withOutputStream{ it << i }}
            println "finished"
        } else {
            println "Ghidra distribution already exists: " + f.getAbsolutePath()
        }
    }
}

task setupGhidra(type: Copy) {
    group 'ghidra'
    dependsOn 'downloadGhidra'
    def zipFile = file(projectDir.getAbsolutePath() + '/libs/' + ghidraArchive)
    def outputDir = file(projectDir.getAbsolutePath() + '/libs')
 
    from(zipTree(zipFile)) {
        include '**/Ghidra/Framework/**'
        include '**/Ghidra/Features/Base/**'
        include '**/Ghidra/Features/VersionTracking/**'
    }
    into outputDir
    includeEmptyDirs = false
}

mainClassName = 'yetmorecode.ghidrarest.GhidraRestApplication'